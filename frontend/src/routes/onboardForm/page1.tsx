import { data, Form, useFetcher, useOutletContext } from "react-router";
import { Dropdown, InputField }  from "../../components/FormComponents";
import { useEffect, useState } from "react";
import axios from "axios";

// This should have stuff like the forwards and back arrows etc, save button, etc.
// If save button is pressed it needs to send an action to the relevant page so that it takes data and uploads it to the db.
// This will also have a complete button and whenever it's pressed it'll make sure the current page saves then it'll redirect you to the home page.
// Will need to make sure that before any re-render that the data is saved so they don't lose data because of authentication
function OnboardForm(){
  // All state passed into this, when button is clicked it all goes to that for processing.
  const formStateHandler: { formState: any, updateFormState: Function, setCanProceed: any} = useOutletContext();
  const updateFormState = formStateHandler.updateFormState;
  const formState = formStateHandler.formState;
  const setCanProceed = formStateHandler.setCanProceed;

  const [isValidCompany, setIsValidCompany] = useState(true);

  let defaultCompanyName = "";

  if (formState.FormState["CompanyNameCheck"]){
    defaultCompanyName = formState.FormState["CompanyNameCheck"];
  }
  const [companyName, setCompanyName] = useState(defaultCompanyName);

  const onClientTypeChanged = (event: any) => {
    const clientType = event.target.value;
    formState.FormState["ClientType"] = clientType;
    setIsValidCompany(!(clientType == "Company"));
    updateFormState(formState)
  }

  const getCompanyStatus = async (event: any) => {
    await axios.get("http://localhost:3000/", {params: {companyName: companyName}})
    .then((response) => {setCanProceed({canProceed: response.data});})
    .catch((err) => console.log(err));

    formState.FormState["CompanyNameCheck"] = companyName;
    updateFormState(formState);
  }

  useEffect(() => {
    if (formState.FormState["ClientType"] && formState.FormState["ClientType"] == "Company"){
      setIsValidCompany(false);
      setCanProceed({canProceed: false})
    } else {
      setCanProceed({canProceed: true})
    }
  }, [isValidCompany])

  return(
    <>
      <p className="requiredField">Fields marked with * are required</p>
      <Form action="" method="post">
        <span>Client Name: </span>
        <input name="ClientName" defaultValue={formState["ClientName"]} onChange={(e) => {formState["ClientName"] = e.target.value; updateFormState(formState)}}></input>
        <div className="dropdown">
          <span className="formLabel">Client Type:*</span>
          <select name="ClientType" defaultValue={formState.FormState["ClientType"]} onChange={onClientTypeChanged}>
            <option> Individual </option>
            <option> Company </option>
          </select>
          { !isValidCompany && <div> <p>Is valid company check: what is the name?</p>
          <input defaultValue={companyName} onChange={(e) => {setCompanyName(e.target.value);}} />
          <button type="button" onClick={getCompanyStatus}>Submit to Companies House</button>
          </div>
          }
        </div>
        {/* Office */}
        <Dropdown name="Office" label="Office:" options={["Norwich"]} updateState={updateFormState} formState={formState} required={true} />

        <Dropdown name="Department" label="Department:" options={["Business"]} updateState={updateFormState} formState={formState} required={true}/>

        <Dropdown name="Partner" label="Partner:" options={["Generated by db request"]} updateState={updateFormState} formState={formState} required={true}/>

        <InputField name="Manager" label="Manager:" updateState={updateFormState} formState={formState}/> 

        <InputField name="CaseWorker" label="Case Worker:" updateState={updateFormState} formState={formState}/>

      </Form>
    </>
  )
}



export default OnboardForm
